name: CD

concurrency:
  group: production
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "The tag of the Docker image to deploy"
        required: true
        type: string

  workflow_call:
    inputs:
      image_tag:
        required: true
        type: string
      debug:
        required: false
        type: string
        default: 'false'
env:
  RESOURCE_GROUP: "tsvi-rg"
  CONTAINER_REGISTRY: "ghcr.io/octodemo/dotnet-razor-pages-movie"

jobs:
  staging-end2end-tests:
    permissions:
      actions: read
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout
      issues: write

    
    runs-on: ubuntu-latest
    environment: STAGE
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.7
        
      - name: 'Az CLI Login via OIDC'
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy the Azure App - Including DB Migrations [STAGING ENVIRONMENT]
        uses: hashicorp/setup-terraform@v3.1.2
      
      - name: Terraform Commands
        run: |
          terraform init
          terraform validate
          terraform plan -out=tfplan -var 'sql_admin_password=${{ secrets.SA_PASSWORD }}' -var 'image_tag=${{ inputs.image_tag }}'
          terraform apply -auto-approve tfplan
        working-directory: ./terraform/staging

      - name: Capture Terraform Outputs
        id: capture_outputs
        run: |
          echo "CONTAINER_APP_URL=$(terraform output -raw container_app_url)" >> $GITHUB_ENV
        working-directory: ./terraform/staging

      - name: Upload Teraaform State and files
        uses: actions/upload-artifact@v3
        with:
          name: terraform-state
          path: ./terraform/staging/

      - name: Generate Artifact URL
        id: generate_artifact_url
        run: |
          ARTIFACT_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts | jq -r '.artifacts[] | select(.name=="terraform-state") | .id')
          echo "ARTIFACT_URL=https://github.com/octodemo/dotnet-razor-pages-movie/actions/runs/${{ github.run_id }}/artifacts/${ARTIFACT_ID}" >> $GITHUB_ENV

      # Open an issue and notify QA that the staging environment is ready for testing
      - name: Create Issue
        uses: peter-evans/create-issue-from-file@v5.0.1
        with:
          title: Staging Environment Ready for Testing
          labels: staging,ready-for-testing,UAT
          assignees: ${{ github.actor }}
          content-filepath: .github/ISSUE_TEMPLATE/staging-environment-ready.md
          token: ${{ secrets.GITHUB_TOKEN }}


  production:
    permissions:
      actions: read
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout
    
    runs-on: ubuntu-latest
    environment: 
      name: PROD
      url: http://tsvi.eastus.cloudapp.azure.com
    needs: [staging-end2end-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.7

      - name: 'Az CLI Login via OIDC'
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy the Azure App - Including DB Migrations [PRODUCTION ENVIRONMENT]
        run: |
          echo "Deploying the Azure App - Including DB Migrations [PRODUCTION ENVIRONMENT]"